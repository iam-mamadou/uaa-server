buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.4')
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.unbroken-dome.test-sets'

group = 'com.mamadou.sk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

jar {
	baseName = 'uua-service'
	version = '1.0.0'
}


dependencies {
	// web
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')

	// jpa
	compile('org.springframework.boot:spring-boot-starter-data-jpa')

	// commons lang3
	compile('org.apache.commons:commons-lang3:3.6')

	compile("io.jsonwebtoken:jjwt:0.7.0")

	// h2 - in memory dev.db for fast development
	runtime('com.h2database:h2')

	// flyway for db migrations
	compile('org.flywaydb:flyway-core:5.0.7')

	// lombok for generating boilerplates
	compileOnly('org.projectlombok:lombok')

	// boot dev
	compile('org.springframework.boot:spring-boot-devtools')

	// spring actuator
	compile('org.springframework.boot:spring-boot-starter-actuator')

	// mapping objects types
	compile('org.modelmapper:modelmapper:1.1.0')

	// test
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

// gradle wrapper to ensure the correct gradle version is in use
task wrapper(type: Wrapper) {
	gradleVersion = '4.5.1'
}

// set up integration-test directory
testSets {
	integrationTest { dirName = 'integration-test'}
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

integrationTest {
	reports {
		html.setDestination(file("$buildDir/reports/integration-tests"))
		junitXml.setDestination(file("$buildDir/integration-test-results"))
	}
}

// display test results in console
tasks.withType(Test) {
	testLogging {
		showStandardStreams = true
		afterSuite { desc, result ->
			if (!desc.parent) {
				def testDescription = "Tests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount "
				def divider = '-' * testDescription.length()
				def testResult = """
					Results:
					$testDescription
					$divider
					BUILD: ${result.resultType}
					$divider
					Total time: ${(result.endTime-result.startTime)/1000} seconds
					Finished time: ${new Date().format("dd-MM-yyyy-HH:mm:ss z", TimeZone.getTimeZone('GMT'))}
					$divider"""
				println testResult.stripIndent()
			}
		}

	}
}